-- ServerScriptService/Services/AntiExploitService.lua
-- Lightweight per-session telemetry + rate limiting for remotes.
-- In-memory only (resets on server restart). Safe to require from other services.

local Anti = {}

local function now()
	return os.clock()
end

-- Per-player rolling counters (timestamps)
local counters = {}   -- [userId] = { [key] = { t1, t2, ... } }
local flags    = {}   -- [userId] = suspicion score
local logs     = {}   -- array of { t, userId, type, key, info }

local function ensure(uid, key)
	counters[uid] = counters[uid] or {}
	counters[uid][key] = counters[uid][key] or {}
	return counters[uid][key]
end

local function prune(list, window)
	window = window or 1.0
	local cutoff = now() - window
	local j = 1
	for i = 1, #list do
		if list[i] >= cutoff then
			list[j] = list[i]
			j += 1
		end
	end
	for k = j, #list do list[k] = nil end
	return #list
end

function Anti.bump(plrOrUid, key, window)
	local uid = typeof(plrOrUid) == "Instance" and plrOrUid.UserId or plrOrUid
	local list = ensure(uid, key)
	list[#list+1] = now()
	return prune(list, window or 1.0)
end

function Anti.rateLimit(plr, key, limit, window)
	limit = limit or 5
	window = window or 1.0
	local c = Anti.bump(plr, key, window)
	local ok = (c <= limit)
	if not ok then
		Anti.log(plr, "rate_limit", key, { count = c, window = window, limit = limit })
	end
	return ok
end

function Anti.log(plrOrUid, typ, key, info)
	local uid = typeof(plrOrUid) == "Instance" and plrOrUid.UserId or plrOrUid
	logs[#logs+1] = { t = now(), userId = uid, type = typ, key = key, info = info }
	if typ == "rate_limit" or typ == "invalid_param" then
		flags[uid] = (flags[uid] or 0) + 1
		if flags[uid] == 5 or flags[uid] % 10 == 0 then
			warn(("[AntiExploit] userId=%d flagged=%d last=%s/%s"):format(uid, flags[uid], tostring(typ), tostring(key)))
		end
	end
end

function Anti.getSummary()
	local out = {
		totalLogs = #logs,
		users = {},
	}
	for uid, score in pairs(flags) do
		local per = counters[uid]
		local hot = {}
		if per then
			for k, list in pairs(per) do
				hot[#hot+1] = { key = k, recent = prune(list, 2.0) }
			end
		end
		out.users[#out.users+1] = { userId = uid, score = score, hot = hot }
	end
	return out
end

function Anti.reset(uid)
	counters[uid] = nil
	flags[uid] = nil
end

-- Reporter loop (prints a brief summary every 60s if there are any logs)
local started = false
task.spawn(function()
	if started then return end
	started = true
	while true do
		task.wait(60)
		local s = Anti.getSummary()
		if s and s.totalLogs and s.totalLogs > 0 then
			-- Top offenders (sorted by score desc)
			local users = s.users or {}
			table.sort(users, function(a,b) return (a.score or 0) > (b.score or 0) end)
			local lines = {}
			for i = 1, math.min(3, #users) do
				local u = users[i]
				table.insert(lines, string.format("userId=%d score=%d hot=%d keys", u.userId or 0, u.score or 0, #(u.hot or {})))
			end
			warn(("[AntiExploit] logs=%d | %s"):format(s.totalLogs, table.concat(lines, " ; ")))
		end
	end
end)

return Anti
